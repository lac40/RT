@model List<RepTrackWeb.Models.Notification.NotificationViewModel>

@{
    ViewData["Title"] = "Notifications";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Notifications</h1>
        @if (Model.Any(n => !n.IsRead))
        {
            <button id="markAllReadBtn" class="btn btn-outline-primary">
                <i class="fas fa-check-double"></i> Mark All as Read
            </button>
        }
    </div>

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle"></i> You have no notifications.
        </div>
    }
    else
    {
        <div class="list-group">
            @foreach (var notification in Model)
            {
                <div class="list-group-item notification-item @(!notification.IsRead ? "unread" : "")" data-notification-id="@notification.Id">
                    <div class="d-flex w-100 justify-content-between align-items-start">
                        <div class="d-flex align-items-start flex-grow-1">
                            <div class="notification-icon me-3">
                                <i class="@notification.GetIconClass() fa-2x"></i>
                            </div>
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <h5 class="mb-0">@notification.Title</h5>
                                    <span class="@notification.GetBadgeClass()">@notification.Type</span>
                                </div>
                                <p class="mb-1">@notification.Message</p>
                                <small class="text-muted">@notification.GetRelativeTime()</small>
                            </div>
                        </div>
                        <div class="notification-actions ms-3">
                            @if (!notification.IsRead)
                            {
                                <button class="btn btn-sm btn-outline-success mark-read-btn" data-id="@notification.Id" title="Mark as read">
                                    <i class="fas fa-check"></i>
                                </button>
                            }
                            <form asp-action="Delete" method="post" class="d-inline">
                                <input type="hidden" name="id" value="@notification.Id" />
                                <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete" onclick="return confirm('Are you sure you want to delete this notification?')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@section Styles {
    <style>
        .notification-item {
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
        }

            .notification-item.unread {
                background-color: #f8f9fa;
                border-left-color: #1b6ec2;
            }

            .notification-item:hover {
                background-color: #f1f3f5;
            }

        .notification-icon {
            color: #6c757d;
            min-width: 50px;
            text-align: center;
        }

        .notification-actions {
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .notification-item:hover .notification-actions {
            opacity: 1;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Mark individual notification as read
            $('.mark-read-btn').click(function(e) {
                e.preventDefault();
                const btn = $(this);
                const notificationId = btn.data('id');
                const notificationItem = btn.closest('.notification-item');

                $.post('@Url.Action("MarkAsRead", "Notification")',
                    { id: notificationId },
                    function() {
                        notificationItem.removeClass('unread');
                        btn.remove();
                        updateNotificationBadge();
                    }
                );
            });

            // Mark all as read
            $('#markAllReadBtn').click(function() {
                $.post('@Url.Action("MarkAllAsRead", "Notification")', function() {
                    $('.notification-item').removeClass('unread');
                    $('.mark-read-btn').remove();
                    $('#markAllReadBtn').remove();
                    updateNotificationBadge();
                });
            });

            // Update the notification badge in the navbar
            function updateNotificationBadge() {
                // This will be called to update the badge count in the navbar
                if (typeof updateNavbarNotificationCount === 'function') {
                    updateNavbarNotificationCount();
                }
            }
        });
    </script>
}