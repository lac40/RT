@model RepTrackWeb.Models.WorkoutSession.WorkoutSessionDetailViewModel

@{
    ViewData["Title"] = "Workout Details";
}

@section Styles {
    <style>
        .drag-handle {
            cursor: move;
            opacity: 0.5;
        }
        
        .drag-handle:hover {
            opacity: 1;
        }
        
        .draggable-item {
            transition: background-color 0.2s ease;
        }
        
        .draggable-item.dragging {
            background-color: #f8f9fa;
            border: 1px dashed #ced4da;
        }
        
        .set-card {
            margin-bottom: 10px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        
        .set-card .card-body {
            padding: 0.75rem;
        }
        
        .exercise-card {
            margin-bottom: 15px;
            border-radius: 8px;
            overflow: hidden;
        }
        
        .add-set-btn {
            width: 100%;
            border-radius: 8px;
            margin-top: 10px;
        }
        
        .set-type-badge {
            font-size: 0.7rem;
            padding: 0.25rem 0.5rem;
        }
    </style>
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Workout Details</h1>
        <div>
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">Edit</a>
            <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">Delete</a>
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">
                @Model.SessionDate.ToShortDateString() - @Model.SessionTypeName
                @if (Model.IsCompleted)
                {
                    <span class="badge bg-success float-end">Completed</span>
                }
                else
                {
                    <span class="badge bg-warning float-end">In Progress</span>
                    <form asp-action="Complete" asp-route-id="@Model.Id" method="post" class="d-inline float-end me-2">
                        <button type="submit" class="btn btn-sm btn-success">Mark Complete</button>
                    </form>
                }
            </h5>
        </div>
        <div class="card-body">
            @if (!string.IsNullOrEmpty(Model.Notes))
            {
                <h6>Notes:</h6>
                <p>@Model.Notes</p>
            }

            <h5 class="mt-3">
                Exercises (@Model.Exercises.Count)
                <a asp-controller="WorkoutExercise" asp-action="Add" asp-route-workoutId="@Model.Id" class="btn btn-sm btn-outline-primary float-end">Add Exercise</a>
            </h5>

            @if (!Model.Exercises.Any())
            {
                <div class="alert alert-info">
                    No exercises added to this workout yet.
                </div>
            }
            else
            {
                <div class="exercise-container" id="exerciseContainer" data-workout-id="@Model.Id">
                    @foreach (var exercise in Model.Exercises.OrderBy(e => e.Id))
                    {
                        <div class="exercise-card card draggable-item" data-exercise-id="@exercise.Id">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    <span class="drag-handle me-2">
                                        <i class="fas fa-grip-vertical"></i>
                                    </span>
                                    <h5 class="mb-0">@exercise.Name (@exercise.Sets.Count sets)</h5>
                                </div>
                                <div>
                                    <a asp-controller="WorkoutExercise" asp-action="Edit" asp-route-id="@exercise.Id" asp-route-workoutId="@Model.Id" class="btn btn-sm btn-outline-secondary">Edit</a>
                                    <form asp-controller="WorkoutExercise" asp-action="Delete" asp-route-id="@exercise.Id" asp-route-workoutId="@Model.Id" method="post" class="d-inline">
                                        <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this exercise? All sets will also be deleted.')">Delete</button>
                                    </form>
                                </div>
                            </div>
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(exercise.Notes))
                                {
                                    <p class="mb-3">Notes: @exercise.Notes</p>
                                }

                                <div class="sets-container" id="setsContainer-@exercise.Id" data-exercise-id="@exercise.Id">
                                    @if (exercise.Sets.Any())
                                    {
                                        foreach (var set in exercise.Sets.OrderBy(s => s.Id))
                                        {
                                            <div class="set-card card draggable-item" data-set-id="@set.Id">
                                                <div class="card-body">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <div class="d-flex align-items-center">
                                                            <span class="drag-handle me-2">
                                                                <i class="fas fa-grip-vertical"></i>
                                                            </span>
                                                            <div>
                                                                <span class="set-type-badge badge bg-info">@set.TypeName</span>
                                                                <span class="ms-2"><strong>@set.Weight</strong> x <strong>@set.Repetitions</strong> @ <strong>@set.RPE</strong></span>
                                                            </div>
                                                        </div>
                                                        <div>
                                                            @if (!set.IsCompleted)
                                                            {
                                                                <form asp-controller="ExerciseSet" asp-action="Complete" asp-route-id="@set.Id" asp-route-workoutId="@Model.Id" method="post" class="d-inline">
                                                                    <button type="submit" class="btn btn-sm btn-success">Complete</button>
                                                                </form>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge bg-success">Completed</span>
                                                            }
                                                            <div class="btn-group ms-2">
                                                                <a asp-controller="ExerciseSet" asp-action="Edit" asp-route-id="@set.Id" asp-route-workoutId="@Model.Id" class="btn btn-sm btn-outline-secondary">Edit</a>
                                                                <form asp-controller="ExerciseSet" asp-action="Delete" asp-route-id="@set.Id" asp-route-workoutId="@Model.Id" method="post" class="d-inline">
                                                                    <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this set?')">Delete</button>
                                                                </form>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="alert alert-light">No sets recorded yet.</div>
                                    }
                                </div>

                                <a asp-controller="ExerciseSet" asp-action="Add" asp-route-workoutExerciseId="@exercise.Id" asp-route-workoutId="@Model.Id" class="btn btn-sm btn-outline-primary add-set-btn">Add Set</a>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
    <script>
        // Enable draggable exercise reordering
        const exerciseContainer = document.getElementById('exerciseContainer');
        if (exerciseContainer) {
            const workoutId = exerciseContainer.dataset.workoutId;
            
            new Sortable(exerciseContainer, {
                handle: '.drag-handle',
                animation: 150,
                onEnd: function(event) {
                    const exerciseIds = Array.from(exerciseContainer.querySelectorAll('.exercise-card'))
                        .map(item => parseInt(item.dataset.exerciseId));
                    
                    // Send the reordered exercise IDs to the server
                    $.ajax({
                        url: '@Url.Action("ReorderExercises", "WorkoutSession")',
                        type: 'POST',
                        data: {
                            workoutId: workoutId,
                            exerciseIds: exerciseIds
                        },
                        headers: {
                            "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                        },
                        success: function(response) {
                            console.log('Exercises reordered successfully');
                        },
                        error: function(error) {
                            console.error('Error reordering exercises:', error);
                            // Reload the page to reset the order
                            window.location.reload();
                        }
                    });
                }
            });
            
            // Enable draggable set reordering for each exercise
            document.querySelectorAll('.sets-container').forEach(container => {
                const exerciseId = container.dataset.exerciseId;
                
                new Sortable(container, {
                    handle: '.drag-handle',
                    animation: 150,
                    onEnd: function(event) {
                        const setIds = Array.from(container.querySelectorAll('.set-card'))
                            .map(item => parseInt(item.dataset.setId));
                        
                        // Send the reordered set IDs to the server
                        $.ajax({
                            url: '@Url.Action("Reorder", "ExerciseSet")',
                            type: 'POST',
                            data: {
                                workoutExerciseId: exerciseId,
                                setIds: setIds
                            },
                            headers: {
                                "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: function(response) {
                                console.log('Sets reordered successfully');
                            },
                            error: function(error) {
                                console.error('Error reordering sets:', error);
                                // Reload the page to reset the order
                                window.location.reload();
                            }
                        });
                    }
                });
            });
        }
    </script>
}